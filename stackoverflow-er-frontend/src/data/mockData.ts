import { Entity, Relationship } from '../types/ERTypes';

export const mockEntities: Entity[] = [
  {
    id: 'users',
    name: 'USERS',
    displayName: 'Users',
    position: { x: 600, y: 100 },
    color: '#4CAF50',
    apiEndpoint: '/api/users',
    attributes: [
      { name: 'user_id', type: 'INTEGER', isPrimaryKey: true, isRequired: true },
      { name: 'name', type: 'VARCHAR(50)', isRequired: true },
      { name: 'reputation', type: 'INTEGER', isRequired: true },
      // outros atributos podem ser adicionados aqui
    ],
  },
  {
    id: 'questions',
    name: 'QUESTIONS',
    displayName: 'Questions',
    position: { x: 400, y: 250 },
    color: '#FF9800',
    apiEndpoint: '/api/questions',
    attributes: [
      { name: 'question_id', type: 'INTEGER', isPrimaryKey: true, isRequired: true },
      { name: 'title', type: 'VARCHAR(255)', isRequired: true },
      { name: 'body', type: 'TEXT', isRequired: true },
      { name: 'creation_date', type: 'TIMESTAMP', isRequired: true },
      { name: 'user_id', type: 'INTEGER', isForeignKey: true, isRequired: true },
    ],
  },
  {
    id: 'answers',
    name: 'ANSWERS',
    displayName: 'Answers',
    position: { x: 600, y: 400 },
    color: '#9C27B0',
    apiEndpoint: '/api/answers',
    attributes: [
      { name: 'answer_id', type: 'INTEGER', isPrimaryKey: true, isRequired: true },
      { name: 'body', type: 'TEXT', isRequired: true },
      { name: 'creation_date', type: 'TIMESTAMP', isRequired: true },
      { name: 'user_id', type: 'INTEGER', isForeignKey: true, isRequired: true },
      { name: 'question_id', type: 'INTEGER', isForeignKey: true, isRequired: true },
    ],
  },
  {
    id: 'comments',
    name: 'COMMENTS',
    displayName: 'Comments',
    position: { x: 400, y: 550 },
    color: '#F44336',
    apiEndpoint: '/api/comments',
    attributes: [
      { name: 'comment_id', type: 'INTEGER', isPrimaryKey: true, isRequired: true },
      { name: 'body', type: 'TEXT', isRequired: true },
      { name: 'creation_date', type: 'TIMESTAMP', isRequired: true },
      { name: 'user_id', type: 'INTEGER', isForeignKey: true, isRequired: true },
      { name: 'question_id', type: 'INTEGER', isForeignKey: true },
      { name: 'answer_id', type: 'INTEGER', isForeignKey: true },
    ],
  },
  {
    id: 'tags',
    name: 'TAGS',
    displayName: 'Tags',
    position: { x: 100, y: 300 },
    color: '#607D8B',
    apiEndpoint: '/api/tags',
    attributes: [
      { name: 'tag_id', type: 'INTEGER', isPrimaryKey: true, isRequired: true },
      { name: 'tag_name', type: 'VARCHAR(50)', isRequired: true },
    ],
  },
  {
    id: 'question_tags',
    name: 'QUESTION_TAGS',
    displayName: 'Question Tags',
    position: { x: 200, y: 450 },
    color: '#795548',
    apiEndpoint: '/api/question-tags',
    attributes: [
      { name: 'question_id', type: 'INTEGER', isPrimaryKey: true, isForeignKey: true, isRequired: true },
      { name: 'tag_id', type: 'INTEGER', isPrimaryKey: true, isForeignKey: true, isRequired: true },
    ],
  },
];

export const mockRelationships: Relationship[] = [
  {
    id: 'users-questions',
    fromEntity: 'users',
    toEntity: 'questions',
    type: 'one-to-many',
    label: 'asks',
    fromCardinality: '1',
    toCardinality: 'N',
  },
  {
    id: 'users-answers',
    fromEntity: 'users',
    toEntity: 'answers',
    type: 'one-to-many',
    label: 'writes',
    fromCardinality: '1',
    toCardinality: 'N',
  },
  {
    id: 'questions-answers',
    fromEntity: 'questions',
    toEntity: 'answers',
    type: 'one-to-many',
    label: 'have',
    fromCardinality: '1',
    toCardinality: 'N',
  },
  {
    id: 'users-comments',
    fromEntity: 'users',
    toEntity: 'comments',
    type: 'one-to-many',
    label: 'writes',
    fromCardinality: '1',
    toCardinality: 'N',
  },
  {
    id: 'answers-comments',
    fromEntity: 'answers',
    toEntity: 'comments',
    type: 'one-to-many',
    label: 'have',
    fromCardinality: '1',
    toCardinality: 'N',
  },
  {
    id: 'tags-question_tags',
    fromEntity: 'tags',
    toEntity: 'question_tags',
    type: 'one-to-many',
    label: 'used in',
    fromCardinality: '1',
    toCardinality: 'N',
  },
  {
    id: 'questions-question_tags',
    fromEntity: 'questions',
    toEntity: 'question_tags',
    type: 'one-to-many',
    label: 'tagged with',
    fromCardinality: '1',
    toCardinality: 'N',
  },
];